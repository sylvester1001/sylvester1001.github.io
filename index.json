[{"content":"","date":"2024-03-05","permalink":"/tags/blog/","section":"Tags","summary":"","title":"Blog"},{"content":" ","date":"2024-03-05","permalink":"/blog/","section":"Blog","summary":"","title":"Blog"},{"content":"","date":"2024-03-05","permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"Blowfish"},{"content":"","date":"2024-03-05","permalink":"/tags/friend-link/","section":"Tags","summary":"","title":"Friend Link"},{"content":"","date":"2024-03-05","permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":" 本文记录为本站添加友链的方法，虽然目前为止博客还没有什么有价值的内容，也没有什么友链可挂，但还是想一次性把它装修完整(瞎折腾). 另一方面也是由于在网上没有看到有关于使用 Blowfish 主题的教程，所以把过程记录下来希望能帮到有需要的朋友们～\n在查阅 Blowfish 文档后得知，为 Blowfish 主题添加友链分为以下三步：\n创建 shortcode 模板 创建 css 样式 使用友链 创建 shortcode 模板 # 在 \u0026lt;博客根目录\u0026gt;/layouts/shortcodes 下创建文件 friend.html, 将以下内容写入并保存\n{{ if .IsNamedParams }} \u0026lt;a target=\u0026#34;_blank\u0026#34; href={{ .Get \u0026#34;url\u0026#34; }} title={{ .Get \u0026#34;name\u0026#34; }} class=\u0026#34;friendurl\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddiv\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddivleft\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;myfriend\u0026#34; src={{ .Get \u0026#34;logo\u0026#34; }} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frienddivright\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friendname\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friendinfo\u0026#34;\u0026gt;{{ .Get \u0026#34;word\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; {{ end }} 创建 CSS 样式 # 在 \u0026lt;博客根目录\u0026gt;/assets/css 目录下创建 custom.css ，我的配置如下，仅作参考，需自行根据你使用的主题调整：\n/* 根据主题修改颜色 */ :root { --friend-bg: rgb(196, 217, 246); /* 浅色模式背景颜色 */ --friend-name-color: #000000; --friend-url-color: #000000; --friend-bg-edge: #ffffff /* 头像外的色圈颜色 */ } .dark { --friend-bg: rgba(214, 181, 82, 0.9);/* 深色模式背景颜色 */ --friend-name-color: #000000; --friend-url-color: #000000; --friend-bg-edge: #ffffff; } .friendurl { text-decoration: none !important; color: var(--friend-url-color); box-shadow: none !important; } /* 鼠标触碰放大时链接颜色 */ .friendurl:hover{ color: #000000; } /* 深色模式下 */ .dark .friendurl:hover { color: #000000; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50%!important; padding: 2px; margin-top: 20px !important; margin-left: 14px !important; background-color: var(--friend-bg-edge); /* 头像外的色圈颜色 */ } .frienddiv { overflow: auto; height: 100px; /* 控制卡片长短 */ /* width: 100%; */ width: 292px; display: inline-block !important; /* 修改 margin 以调整两个友链间的间距 */ margin-right: 15px; margin-bottom: 10px; /* 背景矩形圆角半径 */ border-radius: 25px; background: var(--friend-bg); /* 背景磨砂玻璃 */ backdrop-filter: blur(15px); -webkit-transition: all ease-out 0.3s; -moz-transition: all ease-out 0.3s; -o-transition: all ease-out 0.3s; transition: all ease-out 0.3s; } .dark .frienddiv { overflow: auto; height: 100px; width: 292px; display: inline-block !important; margin-right: 15px; margin-bottom: 10px; border-radius: 25px; background: var(--friend-bg); /* background: rgba(var(--friend-bg-r), var(--friend-bg-g), var(--friend-bg-b), 1); */ backdrop-filter: blur(15px); -webkit-transition: all ease-out 0.3s; -moz-transition: all ease-out 0.3s; -o-transition: all ease-out 0.3s; transition: all ease-out 0.3s; } .frienddiv:hover { /*浅色模式下鼠标碰到友链时放大的背景颜色 */ background: var(--friend-bg); transition: transform 0.9s; -webkit-transform: scale(1.03); -moz-transform: scale(1.03); -ms-transform: scale(1.03); -o-transform: scale(1.03); transform: scale(1.03); } .dark .frienddiv:hover { /* 深色模式下鼠标碰到友链时放大的背景颜色 */ background: var(--friend-bg); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; margin-right: -5px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; font-size: 100%; margin-bottom: 5px; /* color: var(--primary); */ color: var(--friend-name-color); } .friendinfo { text-overflow: ellipsis; font-size: 70%; color: var(--primary); } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 18px; } } 使用友链 # 最后在友链页面中使用以下方式引入友链：\n{{\u0026lt; friend name=\u0026#34;\u0026lt;朋友名字\u0026gt;\u0026#34; url=\u0026#34;\u0026lt;地址\u0026gt;\u0026#34; logo=\u0026#34;\u0026lt;logo 地址\u0026gt;\u0026#34; word=\u0026#34;\u0026lt;简介内容\u0026gt;\u0026#34; \u0026gt;}} 例如：\n{{\u0026lt; friend name=\u0026#34;mostima\u0026#34; url=\u0026#34;https://mostima.blog\u0026#34; logo=\u0026#34;https://mostima.blog/img/avatar.jpg\u0026#34; word=\u0026#34;That was less than stellar\u0026#34; \u0026gt;}} 效果如下： Mostima 拍碎波浪的一千朵太阳 ","date":"2024-03-05","permalink":"/blog/friend-link-hugo-blog/","section":"Blog","summary":"","title":"Hugo 博客 Blowfish 主题添加友链"},{"content":"","date":"2024-03-05","permalink":"/series/hugo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","section":"Series","summary":"","title":"Hugo 博客搭建"},{"content":"","date":"2024-03-05","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"这是一个Tags测试页\n","date":"2024-03-05","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" ","date":"2024-03-05","permalink":"/","section":"That was less than stellar.","summary":"","title":"That was less than stellar."},{"content":"","date":"2024-02-29","permalink":"/tags/life/","section":"Tags","summary":"","title":"Life"},{"content":"","date":"2024-02-29","permalink":"/tags/music/","section":"Tags","summary":"","title":"Music"},{"content":"分享一首听了好多年，但一直很喜欢，怎么也听不腻，总在不知道该听什么的时候按下播放键的歌曲。\n来自「The Honeysticks」乐队的「Out Like a Light」\n第一次听到这首歌是在 2019 年盛夏，黄昏日分，刚放暑假不久的我正坐在去往机场的空港线列车上，距离回国的航班起飞大约还有4小时。\n耳机里传来歌曲开头的「Woo woo woo woo..」，列车窗外是日落时粉蓝色的天空，海边的大桥，对岸刚亮起灯火的城市，一瞬间击中了我的心。\n美好的瞬间抓不住也留不住，有风便会越飞越远，但或许风筝放飞才是最好的结果。\n","date":"2024-02-29","permalink":"/blog/song-sharing/","section":"Blog","summary":"","title":"分享一首喜欢的歌"},{"content":" Waline 是一款简洁，安全的评论系统。它支持完整的 Markdown 语法，同时包含表情，数学公式， HTML嵌入等。\n在允许匿名评论的基础上支持账号登录，可以有效保持身份。并且允许使用 Vercel 免费，且简洁方便的部署。\n配置方式 # LeanCLoud 设置（数据库） # \u0026nbsp;登录 或 注册\u0026nbsp; 点击左上角 创建应用 并起一个名字 (选择免费的开发版）\n进入刚刚创建的应用，点击左下角的 设置，然后选择 应用凭证，此时你会看到你的 AppID, AppKey 以及 MasterKey. 请妥善记录他们，后续将会使用。\n注意： 如果你正在使用 Leancloud 国内版 ( leancloud.cn)，推荐你切换到国际版 ( leancloud.app)。否则，你需要为应用绑定已备案的域名 Vercel 部署服务端 # 点击上方 Deploy 按钮跳转至 Vercel 部署服务端\n输入一个项目名称，然后点击 Create 进行创建\nVercel 会基于 Waline 的模板创建仓库\n等待片刻，会显示Congratulations! 提示你部署成功，然后请点击 Go to Dashboard 前往控制台\n在顶部点击 Settings , 然后在左下方点击Environment Variables 进入环境变量配置页面\n配置三个环境变量，分别是：\nLEAN_ID\nLEAN_KEY\nLEAN_MASTER_KEY\n这三个环境变量的值(Value) 分别对应上一步在 LeanCloud 中获取的 AppID, AppKey 以及 MasterKey\n配置完成所有的环境变量之后，点击顶部的 Deployments , 选择最近一次部署的右侧的 ··· , 然后点击 Redeploy，以重新部署让环境变量生效\n此时会跳转至 Overview界面, 并开始部署, 稍等片刻 STATUS 会变成 Ready\n可以点击右侧 Visit 前往部署好的网址, 且此地址为你的 Waline 服务端地址\n设置自定义域名 # 点击顶部 Settings, 后于左侧点击 Domains\n输入需要设置的自定义域名后，点击 Add\n在你的域名服务器商，或 Cloudflare（如果你使用 Cloudflare 管理你的域名）处添加一条 CNAME 记录\nType Name Value CNAME example(你在上一步中填写的二级域名) cname.vercel-dns.com 等待生效后即可用自定义的域名来访问了 🎉 🎊\nHTML 引入 # 由于我使用 Blowfish 主题, 故以此主题为例\n在博客文件夹下的 /layouts/partials/comments.html 中粘贴以下内容\n注意：CSS 变量可自定义， 默认样式为 变量与默认值 \u0026lt;head\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/@waline/client@v2/dist/waline.css\u0026#34; /\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;!-- \u0026lt;div id=\u0026#34;waline-recent\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- import { RecentComments } from \u0026#39;https://cdn.jsdelivr.net/npm/@waline/client/dist/waline.mjs\u0026#39;; --\u0026gt; \u0026lt;!----\u0026gt; \u0026lt;!-- RecentComments({ --\u0026gt; \u0026lt;!-- el: \u0026#39;#waline-recent\u0026#39;, --\u0026gt; \u0026lt;!-- serverURL: \u0026#39;http://waline.vercel.app\u0026#39;, --\u0026gt; \u0026lt;!-- count: 1, --\u0026gt; \u0026lt;!-- }); --\u0026gt; \u0026lt;!-- \u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;div id=\u0026#34;article-info\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;!-- 阅读量: \u0026lt;span class=\u0026#34;waline-pageview-count\u0026#34; data-path=\u0026#34;{{.RelPermalink}}\u0026#34; /\u0026gt; --\u0026gt; \u0026lt;!-- ... --\u0026gt; \u0026lt;!-- \u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { init } from \u0026#39;https://unpkg.com/@waline/client@v2/dist/waline.mjs\u0026#39;; init({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;https://waline.mostima.blog\u0026#39;, lang: \u0026#39;zh-CN\u0026#39;, emoji: [ \u0026#39;//unpkg.com/@waline/emojis@1.2.0/bmoji\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/tieba\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/qq\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.2.0/alus\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.1.0/bilibili\u0026#39;, \u0026#39;https://cdn.jsdelivr.net/gh/norevi/waline-blobcatemojis@1.0/blobs\u0026#39;, ], dark: \u0026#39;html[class=\u0026#34;scroll-smooth dark\u0026#34;]\u0026#39;, }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /*日间模式*/ :root { /* 字体大小 */ --waline-font-size: 16px; /* 白色 */ --waline-white: #ffff; /* 浅灰色 */ --waline-light-grey: #999; /* 深灰色 */ --waline-dark-grey: #666; /* 主题色 */ --waline-theme-color: #3b82f6; /* 活动状态的颜色 */ --waline-active-color: #2ecc71; /* 一般文本颜色 */ --waline-color: #222; /* 背景颜色 */ --waline-bgcolor: #fff; /* 较浅的背景颜色 */ --waline-bgcolor-light: #f8f8f8; /* 鼠标悬停时的背景颜色 */ --waline-bgcolor-hover: #2ecc71; /* 边框颜色 */ --waline-border-color: #ddd; /* 禁用状态的背景颜色 */ --waline-disable-bgcolor: rgba(248, 248, 248, 0.4); /* 禁用状态的文本颜色 */ --waline-disable-color:#bbb; /* 代码块的背景颜色 */ --waline-code-bgcolor: #282c34; /* 引用块的颜色 */ --waline-bq-color: #f0f0f0; /* 头像 */ --waline-avatar-size: 3.25rem; /* 移动设备上的头像大小 */ --waline-m-avatar-size: calc(var(--waline-avatar-size) * 9 / 13); /* 徽章颜色 */ --waline-badge-color: #3b82f6; /* ：徽章字体大小 */ --waline-badge-font-size: 12px; /* 信息块的边框 */ --waline-info-border: 1px solid #999; /* 信息块的文本颜色 */ --waline-info-color: #999; /* 信息块的字体大小 */ --waline-info-font-size: 16px; /* 信息块背景颜色 */ --waline-info-bgcolor: rgba(235, 235, 235, 0.4); /* 渲染选择，一般边框样式 */ --waline-border: 1px solid var(--waline-border-color); /* 头像的圆角半径 */ --waline-avatar-radius: 50%; /* 阴影效果 */ --waline-box-shadow: none; } /* 暗黑模式，根据用户设置 ↓ */ html[class=\u0026#34;scroll-smooth dark\u0026#34;]{ /* 这是用于表示白色的CSS变量, 在暗模式下，白色将变为黑色*/ --waline-white: #000; /* 浅灰色的CSS变量, 在暗模式下，变为深灰色 */ --waline-light-grey: #999; /* --waline-light-grey: #666;*/ /* 示深灰色, 在暗模式下，变为浅灰色 */ --waline-dark-grey: #999; /* 一般文本颜色 */ --waline-color: #c2c2c2; /* 背景颜色 */ --waline-bgcolor: #1E293B; /* 较浅的背景颜色 */ --waline-bgcolor-light: #2A354F; /* 边框颜色 */ --waline-border-color: #666; /* 禁用状态的背景颜色 */ --waline-disable-bgcolor: rgba(68, 68, 68, 0.8); /* 禁用状态的文本颜色 */ --waline-disable-color: #888; /* 引用块颜色 */ --waline-bq-color: #1F2D4B; /* 信息块背景颜色 */ --waline-info-bgcolor: rgba(31, 45, 75, 0.8); /* 信息块字体 */ --waline-info-color: #888; /* 信息块的边框 */ --waline-info-border: 1px solid #d3d3d3; } \u0026lt;/style\u0026gt; \u0026lt;/body\u0026gt; 评论管理后台 # 评论管理后台地址为 \u0026lt;serverURL\u0026gt;/ui/register , 首个注册的用户会被设为管理员账户, 之后注册的用户则为普通用户\n开启评论 # 在博客目录中的 /config/_default/params.toml 文件下, 将 showComments 修改为 true\n[article] showComments = true Telegram 评论通知 # Telegram 通知通过 Telegram bot 机器人实现，需要配置以下几个环境变量:\nTG_BOT_TOKEN: Telegram 机器人用于访问 HTTP API 的 token，通过 @BotFather 创建机器人获取，必填。 TG_CHAT_ID: 接收消息对象的 chat_id，可以是单一用户、频道、群组，通过 @userinfobot 获取，必填。 AUTHOR_EMAIL: 博主邮箱，用来区分发布的评论是否是博主本身发布的。如果是博主发布的则不进行提醒通知。 SITE_NAME: 网站名称，用于在消息中显示。 SITE_URL: 网站地址，用于在消息中显示。 TG_TEMPLATE: Telegram 使用的通知模板，变量与具体格式可参见下文的通知模板。未配置则使用默认模板。 Telegram 通知模板 # 💬 \u0026lt;your site\u0026gt; 有一条新评论 {{self.nick}} 回复: ``` {{self.comment-}} ``` {{-self.commentLink}} _邮箱_: `{{self.mail}}` _地址_: [来源文章]({{site.postUrl}}) ","date":"2024-02-24","permalink":"/blog/waline-comment-system/","section":"Blog","summary":"","title":"Hugo 博客添加 Waline 评论系统"},{"content":"","date":"2024-02-24","permalink":"/tags/waline/","section":"Tags","summary":"","title":"Waline"},{"content":"","date":"2024-01-14","permalink":"/tags/firebase/","section":"Tags","summary":"","title":"Firebase"},{"content":" 简介 # Blowfish 添加了对 Firebase 的支持以在网站上使用动态数据.\n配置方法 # 在 Firebase 官网免费注册一个账号\n选择「添加项目」，输入项目名\n开启「为此项目启用 Google Analytics」\n选择默认账号即可\n进入项目主页后选择 \u0026lt;/\u0026gt;\n输入你的应用名\n选择「使用 \u0026lt;script\u0026gt; 标记」， 并记录下 config 数据，如黄框所示\n在 config/_default/params.toml 文件中将上一步中的配置变量覆盖原配置\n# 实例，请替换为自己的数据 [firebase] apiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;, authDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;, projectId: \u0026#34;blowfish-21fff\u0026#34;, storageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;, messagingSenderId: \u0026#34;60108104191\u0026#34;, appId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;, measurementId: \u0026#34;G-PEDMYR1V0K\u0026#34; 配置 Authentication\n在「项目首页」或「侧边栏」中选择 Authentication\n选择 开始\n选择 「匿名」\n启用匿名，并保存\n点击侧边栏， 选择「Firestore Database」，并点击创建数据库\n选择距离你为止较近的「位置」\n选择「以生产模式开始」，并点击创建\n完成后，修改规则， 将以下内容粘贴进输入框中\nrules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } 如果你之前已经将 showViews 和 showLikes 设置为 true 的话, 现在阅读量和点赞量应该可以正常显示了.\n","date":"2024-01-14","permalink":"/blog/firebase-hugo-blog/","section":"Blog","summary":"","title":"Hugo 博客中配置 Firebase 的方法"},{"content":"","date":"2024-01-06","permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker"},{"content":"","date":"2024-01-06","permalink":"/tags/mattermost/","section":"Tags","summary":"","title":"Mattermost"},{"content":"本文记录如何使用 Docker 私有化部署可于生产环境中使用的 Mattermost 的方法.\nMattermost 介绍 # Mattermost 是一个灵活的开源、可自行架设的 在线聊天服务，有分享文件、搜索与集成其他服务等功能。可用于内网聊天, 自建聊天服务等. 客户端支持全平台终端, 方便且易于使用.\n安装 Docker 及 Docker compose # 我使用 Debian, 故以下内容将基于 Debian, 如果您使用其他系统, 请自行查询如何安装.\n安装 Docker # 更新软件包索引\nsudo apt update 安装所需的包以允许 apt 通过 HTTPS 使用仓库\nsudo apt install apt-transport-https ca-certificates curl software-properties-common 添加 Docker 官方 GPG 密钥\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - 设置 Docker 仓库\nsudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\u0026#34; 再次更新软件包索引\nsudo apt update 安装 Docker CE\nsudo apt install docker-ce 验证 Docker 安装是否成功\nsudo systemctl status docker 如果出现以下内容, 则表示安装成功\n➜ ~ systemctl status docker\r● docker.service - Docker Application Container Engine\rLoaded: loaded (/lib/systemd/system/docker.service; enabled; preset: enabled)\rActive: active (running) since Fri 2024-01-05 14:32:54 UTC; 6min ago\rTriggeredBy: ● docker.socket\rDocs: https://docs.docker.com\rMain PID: 6403 (dockerd)\rTasks: 8\rMemory: 37.4M\rCPU: 351ms\rCGroup: /system.slice/docker.service\r└─6403 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 安装 Docker Compose # 下载 Docker Compose 的当前稳定版本\nsudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose 注意: 本文撰写时最新稳定版本为 v2.23.3, 建议检查 Docker compose github 页面以获取最新版本 赋予二进制文件可执行权限\nsudo chmod +x /usr/local/bin/docker-compose 测试安装\ndocker-compose --version 如出现以下内容, 则表示安装成功\nDocker Compose version v2.23.3 部署 Mattermost # Clone 官方的仓库 \u0026amp; 进入目录\ngit clone https://github.com/mattermost/docker cd docker 创建 .env 文件\n在 docker 目录下, 存在于一个默认文件, 名字为 env.example, 将其 copy 为我们的 .env 文件\ncp env.example .env 修改 .env 文件\n注意: 本文撰写时 Mattermost 最新的版本号为 9.3.0 如果你有域名, 可以将 DOMAIN=mm.example.com 中的域名修改为你的域名\n由于默认使用的是企业版, 如果需要使用社区版请将变量 MATTERMOST_IMAGE 修改为 mattermost-team-edition , 即\n# 将 mattermost-enterprise-edition MATTERMOST_IMAGE=mattermost-enterprise-edition # 修改为 MATTERMOST_IMAGE=mattermost-team-edition 修改需要部署的版本\n将变量 MATTERMOST_IMAGE_TAG 后的版本号修改为所需要安装的版本号, 例如:\nMATTERMOST_IMAGE_TAG=9.3.0 创建所需的目录并设置其权限\nmkdir -p ./volumes/app/mattermost/{config,data,logs,plugins,client/plugins,bleve-indexes}\\ sudo chown -R 2000:2000 ./volumes/app/mattermost 部署 Mattermost\nsudo docker compose -f docker-compose.yml -f docker-compose.without-nginx.yml up -d 现在应该可以使用 http://\u0026lt;你的IP\u0026gt;:8065 来访问你的Mattermost了.\n配置反向代理 # 由于使用 http 为明文传输，并不安全，所以建议使用 https 来访问你刚才搭建好的服务。\n安装 Nginx\nsudo apt intsall nginx 在目录 /etc/nginx/conf.d 中创建文件 mm.conf\nsudo touch /etc/nginx/conf.d/mm.conf 在 mm.conf 中写入配置内容, 例如:\nserver { listen 443 ssl; # 如果有其他进程在运行导致443被占用可以修改为任意其他端口, 但记住将防火墙中对应端口打开 server_name your.domain.com; # 填入DNS解析好的域名 ssl_certificate /your/cert/path; # ssl证书公钥路径 ssl_certificate_key /your/key/path; # ssl证书密钥路径 # 请求体的最大大小, 适用于大文件上传 client_max_body_size 100M; # 设置较长的超时时间，对于文件上传 proxy_read_timeout 300s; proxy_connect_timeout 300s; # 调整缓冲区大小 proxy_buffers 16 16k; proxy_buffer_size 32k; location / { proxy_pass http://127.0.0.1:8065; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#39;Upgrade\u0026#39;; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; } } 加载配置\nsudo systemctl reload nginx 启动 nginx 服务\n# 启动 nginx sudo systemctl start nginx # 或 重启 nginx sudo systemctl restart nginx 此时应该可以使用 https://\u0026lt;你的域名\u0026gt; 来访问你的 Mattermost 了\nMattermost 使用 # 登录 Mattermost # 在使用 https://\u0026lt;yourdomain\u0026gt; 来访问Mattermost服务后，会让你注册地一个账号，默认的第一个账号为管理员账号。\n我的 Mattermost 服务地址为 https://chat.anecho.link, 欢迎大家来玩～\n","date":"2024-01-06","permalink":"/blog/mattermost/","section":"Blog","summary":"","title":"基于 Docker 部署 Mattermost"},{"content":"","date":"2023-11-16","permalink":"/tags/arch-linux/","section":"Tags","summary":"","title":"Arch Linux"},{"content":" 前言 # 由于工作使用的 EDA 软件仅支持在 Linux 环境中运行, 再加之平时喜欢折腾, 在 Windows 或者 macOS 中使用虚拟机总没有一台宿主机来的舒坦 (其实就是想买电脑了). 又考虑到可以用来做旁路由, 让家里的电视, switch 等所有设备方便的科学上网, 所以购入了一台小型 server 放在家里, 平时待机 5W 左右的功耗也足以让我心安理得的让它7/24 online.\n有桌面洁癖的我实在是不希望桌面的两个显示器后面再多出现两根线, 所以决定用 Headless 的方式使用这台 server, 由于 EDA 软件使用需要有图形界面, 所以决定使用 XRDP, 虽然 VNC 也可以, 但由于 XRDP 支持 BIOS 屏幕显示, 所以我决定使用它.\n我的环境：Arch Linux + GNOME 45\n概述 # 什么是 RDP # 相信 Windows 的用户都对 RDP(Remote Desktop Protocol, 远程桌面) 不陌生, 它是由微软开发的一种专有协议, 为用户提供了通过网络连接到另一台计算机的图形界面。在使用上, 用户需要使用 RDP 客户端软件, 而在远程另一台计算机则需要运行 RDP 服务器软件。\nWindows 内置 RDP 服务器 Linux 与 macOS 可以安装 RDP 服务器 服务器默认监听 TCP 端口 3389 和 UDP 端口3389\n什么是 XRDP # XRDP 是一个开源的远程桌面协议服务器，它用来实现 Linux 接受来自 Windows、Mac 或者 Linux 远程桌面客户端或的连接。这意味着你不需要在所使用的 Windows 或 macOS 机器上安装额外的第三方应用程序。\n安装方式 # 安装 xrdp 核心包\nyay -S xrdp 安装 Xorg 后端（根据自己的设备在以下之中三选一即可）：\nInter 与 AMD 核显 (支持硬件加速)\nyay -S xortxrdp-glamor 不使用 GPU (CPU占用率会高)\nyay -S xorgxrdp NVidia 独显\nyay -S xordxrdp-nvidia 安装 Xorg-xinit\npacman -S xorg-xinit 修改 Xwrapper.config 文件\n在/etc/X11/Xwrapper.config中加入以下内容：\nallowed_users=anybody needs_root_rights=no 如果没有这个文件则手动创建\n在~/.xinitrc中写入以下内容：\n#!/bin/sh unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS export XDG_SESSION_TYPE=x11 export GDK_BACKEND=x11 exec dbus-launch gnome-session 同样，如果没有此文件则手动创建\n赋予~/.xinitrc执行权限\nchmod +x ~/.xinitrc 启用服务\nsudo systemctl enable xrdp.service sudo systemctl enable xrdp-sesman.service 重启\nsudo reboot 使用远程桌面连接Arch Linux # 打开「远程桌面连接」\n输入需要Linux的ip\n在弹出的窗口中输入用户名以及密码\n不出意外应该可以看到桌面了\n","date":"2023-11-16","permalink":"/blog/xrdp-arch-linux/","section":"Blog","summary":"","title":"Arch Linux 中配置 xrdp 远程桌面"},{"content":"","date":"2023-11-16","permalink":"/tags/xrdp/","section":"Tags","summary":"","title":"Xrdp"},{"content":"","date":"2023-11-15","permalink":"/tags/mind-wandering/","section":"Tags","summary":"","title":"Mind Wandering"},{"content":"时光匆匆，工作马上一年了。\n从19岁异国他乡求学，坎坎坷坷，品尝过黄金般闪耀的青春，也经历了疾病，疫情。一路走来听起来不易，但老实说，没怎么吃过苦头，父母提供了力所能及最优渥的条件。\n时间，一个熟悉又陌生的词语，吃饭需要时间，发呆需要时间，我写下这些内容需要，阅读这篇博文，亦或者什么也不做，都需要时间。从小到大听到过无数次珍惜时间的话，也许是与生俱来的性格，或者是成长环境带给我的安全感，我对时间的把握一直是从容的，从容到甚至有些极端。偶尔也会因为时间流逝而感到焦虑，归根结底是因为并没有很充实，没有能让自己沉下来的「正事」。但我本就不是一个很善于管理时间的人，虚度光阴也没什么不好不是吗？\n其实我也思考过，为什么自己不是一个很功利的人，不能像我有的朋友那样，去一步一步制定一个计划，并且实施它。思忖良久之后，得到的结果或许是，从小就算不是锦衣玉食，也可以说得上是，在我的认知范围内，从未有过任何求而不得的东西，故性格中缺少了一些所谓「为达目的不择手段」的特性。取而代之的是一些无欲无求的，说难听一些，被人称为「不思进取」，「无上进心」的特质。我不是在规避责任，只是站在客观的角度看待自己，并且我也不认为这有什么不好，世界有参差，人各有不同，这只是我目前为止选择的一种在我这一生的洪流中漂流的方式。\n我是一个念旧的人，我总会翻看以前的相册，也总觉得过去是比未来好的，因为我的过去真的很幸福，不是指物质上，我物质欲望并不强烈，相反对于精神上的满足似乎更加敏感。但过去的相册总会在我猝不及防时给我沉痛的一击，对于四年前失去挚友一事我终究是意难平，时至今日夜晚做梦总会有他清晰的身影，我也没有忘记他的声音。但我又害怕，我怕我有一天会忘记他的声音，可我更知道记忆里他的声音他的面容终究会在时间轴上的某一点开始模糊，最后变为一个由姓名组成的符号。但好在他将最灿烂的时刻留在了所有人的记忆中，未尝不是一件好事，而我也应该知足，至少拥有过。\n晚安\n","date":"2023-11-15","permalink":"/blog/mind-wandering/","section":"Blog","summary":"","title":"睡前的一些胡思乱想"},{"content":"","date":"2023-11-14","permalink":"/tags/cusdis/","section":"Tags","summary":"","title":"Cusdis"},{"content":"","date":"2023-11-14","permalink":"/tags/github-pages/","section":"Tags","summary":"","title":"GitHub Pages"},{"content":" 简介 # 在博客搭建完成之后，我意识到，建站对我来说是一个极低频的工作，除非以后需要更换新的部署方案，否则只有极小的可能性对网站进行大的变动，为了避免我忘记，也为了给有需要的人提供一些力所能及的帮助，故尽量详细的写下此文，如果有错误或误导的内容，请不吝在文末留言，或者邮件联系我～那么就开始吧\nHugo # Hugo 是一个用 Go 实现的静态网站生成器，采用 Markdown 进行文章编辑， 并将 Markdown 文件转化成 HTML 文件来构建网页。支持丰富的主题配置，且可以通过 js 嵌入评论系统等插件。\nGitHub Pages # GitHub Pages 是一个静态网站托管系统，它直接从 GitHub 上的仓库获取 HTML, CSS 和 JavaScript 文件，通过构建过程运行文件，然后发布网站。\n搭建需求 # 1个 GitHub 账号\n2个 GitHub 仓库\n博客内容仓库: 存储博客的内容文件(文档, 图片等)\n输入你想要的仓库名 选择 Public 选择 Add a README file GitHub Pages 仓库: 通过GitHub Pages来搭建博客, 自然需要一个GitHub Pages 仓库\n此仓库需要以你的 用户名.github.io 的形式来命名\n选择 Public\n选择 Add a README file\n由于我已经创建过这个仓库，所以会红字报错，如果你是新建的话不会有此错误\n安装Hugo # 前置需求 # git go dart sass 在确保以上需求满足的情况下, 开始安装Hugo\n安装方法 # 安装方式可选择\n包管理器安装\n较为方便, 但较保守系统如 Debian 可能安装的版本会较低 二进制文件安装\n源码编译安装\n包管理器安装 # macOS # brew install hugo Arch Linux # sudo pacman -S hugo Debian \u0026amp; Ubuntu # sudo apt install hugo Fedora # sudo dnf install hugo openSUSE # sudo zypper install hugo 二进制文件安装 # 下载适合你系统版本的 Hugo二进制文件 将文件解压 将执行文件添加进 PATH 中 源码编译安装 # 要使用源码编译方式安装, 需要满足以下条件:\n已安装 Git\n已安装 Go 1.19 或更高版本\n已安装一个C解析器, GCC 或 Clang\n安装目录由 GOPATH 和 GOBIN 环境变量控制。如果设置了 GOBIN，二进制文件将安装到该目录。如果设置了 GOPATH，二进制文件将安装到 GOPATH 列表中第一个目录的 bin 子目录。否则，二进制文件将安装到默认 GOPATH（$HOME/go 或 %USERPROFILE%\\go）的 bin 子目录下。\n编译安装\nCGO_ENABLED=1 go install -tags extended github.com/gohugoio/hugo@latest 安装结果测试 # hugo version # 如果返回以下类似内容, 则表示安装成功 hugo v0.119.0+extended linux/amd64 BuildDate=unknown 克隆blog仓库到本地 # 进入你想要储存项目的目录中，例如 blog\ncd blog 将之前创建好的「博客内容仓库」克隆到当前目录中\ngit clone https://github.com/你的github用户名/仓库名.git 也可以在这里找到你的仓库链接\n使用 Hugo 创建站点 # 进入克隆下来的「博客内容仓库」中\ncd \u0026lt;博客内容仓库名\u0026gt;\t创建站点，名字由你选择\nhugo new site \u0026lt;your site name\u0026gt; 创建好之后目录的包含如下文件夹及文件\nHugo 主题的安装与配置 # Hugo社区中提供各种主题, 挑选自己喜欢的即可, 各种主题都有详细的文档告诉你如何安装.\n我使用了 Blowfish, 所以接下来的内容都已 Blowfish 为例. nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 686 210 安装 Blowfish 主题 # 有两种方式, 分别为\n使用 git 安装 使用 Hugo 安装 使用 git 安装 # 进入你的 blog 仓库\ncd \u0026lt;博客内容仓库名\u0026gt;\t初始化 git, 并下载 Blowfish 主题\ngit init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 使用 Hugo 安装 # 注意 要使用此方法, 请确保你使用的是 Go 1.12 或更高版本 进入你的 blog 目录\n# 如果你在GitHub上管理你的项目 hugo mod init github.com/\u0026lt;用户名\u0026gt;/\u0026lt;仓库名\u0026gt; # 如果在本地管理项目 hugo mod init my-project 创建一个新文件 config/_default/module.toml，并添加以下内容，将主题添加到配置中：\n[[imports]] path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; 使用 hugo server 启动服务, 主题将会自动下载\n配置 Blowfish 主题 # 由于我选用了 Blowfish , 所以这里以 Blowfish 为例.\n从主题目录中复制配置文件 # 进入站点根目录中 (即刚才使用 hugo new site yoursite 创建的目录 ), 删除 config.toml 文件删除, 如果不存在这个文件, 则忽略这一步\n将主题文件夹中的所有后缀为 .toml 的文件都复制到 yoursite/config/_default/ 目录下.\n注意: 如果你的 config/_default/ 目录下已存在 module.toml 文件, 请勿将其覆盖 主题文件夹中的配置文件一般位于: yoursite/themes/blowfish/config/_default 中\n完成复制后, 你的 config/_default 目录应该包含以下文件\nconfig/_default ├── config.toml ├── languages.en.toml.bak ├── languages.zh-cn.toml ├── markup.toml ├── menus.zh-cn.toml ├── module.toml └── params.toml 基础配置 # 修改 config.toml # theme\n# 将 theme 修改为你的主题名, 表示你将要使用的主题 theme = \u0026#34;你的主题名\u0026#34; baseURL\n# 将baseURL 修改为你的域名 baseURL = \u0026#34;https://yourdomain.com/\u0026#34; 注意：若你尚未在 Github Pages 中设置自定义域名, 请填入 https://\u0026lt;username\u0026gt;.github.io/ defaultContentLanguage\n# 默认的 defaultContentLanguage 为 英语 defaultContentLanguage = \u0026#34;en\u0026#34; # 如果你的博客主要语言是中文的话, 需要将其设置为 defaultContentLanguage = \u0026#34;zh-cn\u0026#34; 修改 languages.en.toml # 修改文件名\n如果在上一步 config.toml 文件中 defaultContentLanguage 项设置为 zh-cn 的话, 需要将文件languages.en.toml 的文件名修改为languages.zh-cn.toml\n修改文件内容\n# 将 languages.zh-cn.toml 文件中的下列项修改为以下内容 languageCode = \u0026#34;zh-cn\u0026#34; languageName = \u0026#34;简体中文\u0026#34; [params] displayName = \u0026#34;ZH-CN\u0026#34; isoCode = \u0026#34;zh-cn\u0026#34; *可选配置 # 以下内容不做特别声明, 都在config/_default/params.toml 文件中配置.\nHeader # 定义整个网站的 header 风格, 可以选择的参数有 basic, fixed, fixed-fill, fixed-fill-blur\n我使用的是 fixed-fill-blur\n[header] layout = \u0026#34;fixed-fill-blur\u0026#34; Homepage # 主页的风格\n可选参数有 page, profile, hero, card, background, or custom.\n[homepage] layout = \u0026#34;background\u0026#34; Recent\n在首页显示最近添加的博文\n[homepage] showRecent = true cardview\n将 Recent 的内容以卡片样式展示\n[homepage] cardView = true Article # Likes \u0026amp; Views\n在文章界面展示点赞量和阅读量\n[article] showViews = true showLikes = true 注意: 这只是打开了允许显示的开关, 但要使网站获取 Likes 和 Views 的数据, 还需要配置 firebase, 请在后面浏览相关条目 Author\n在博文界面展示作者信息\n[article] showAuthor = true Table Of Contents\n在博文界面显示目录\n[article] showTableOfContents = true 注意: 要在移动端正确显示还需要以下步骤 在博客目录下的 i18n 目录中 (如果不存在则创建一个)\n将主题目录下的 zh-CN.yaml 文件复制到 i18n 目录中\n一般存在于 \u0026lt;your_blog_dir\u0026gt;/theme/blowfish/i18n/ 目录下\n然后将 zh-CN.yaml 中的下行取消注释 (即将行首的 # 及 空格 删除)\n# table_of_contents: \u0026#34;Table of Contents\u0026#34; Firebase # Blowfish 添加了对 Firebase 的支持以在网站上使用动态数据，来显示阅读量与点赞数.\n由于内容长度较长，故写在了单独的一篇博文中.\nHugo 博客中配置 Firebase 的方法 2024-01-14\u0026middot;356 字\u0026middot;1 分钟\u0026middot; \u0026middot; Firebase Blog Hugo 评论系统 # 评论系统有很多可以选择, 如 Disqus, Utterances, Cusdis, Waline 等，这里我选择了 Waline.\nWaline 是一款简洁，安全的评论系统。它支持完整的 Markdown 语法，同时包含表情，数学公式， HTML嵌入等的同时具有不错的颜值！且在允许匿名评论的基础上支持账号登录，可以有效保持身份。并且允许使用 Vercel 免费，且简洁方便的部署。\n配置方法请参考此文\nHugo 博客添加 Waline 评论系统 2024-02-24\u0026middot;1723 字\u0026middot;4 分钟\u0026middot; \u0026middot; Waline Hugo ","date":"2023-11-14","permalink":"/blog/hugo-github-pages-blog/","section":"Blog","summary":"","title":"使用 Hugo + GitHub Pages 搭建个人博客"},{"content":"","date":"2023-11-12","permalink":"/tags/naiveproxy/","section":"Tags","summary":"","title":"NaiveProxy"},{"content":" 简介 # 什么是DigitalOcean # DigitalOcean 是一家领先的云基础设施供应商，为开发人员提供一个易于使用、灵活和可扩展的平台，用于部署、管理和扩展应用程序。\n为什么选择DigitalOcean # 选择 DigitalOcean 主要有两个原因：\n按小时计费\n按小时计费的平台其实不仅只有 DigitalOcean 一家，类似的还有 Vultr 等大家也可以选择。\n服务器最低价格为$4/月\n由于搭建 NaïveProxy 服务并没有什么配置要求，所以最低配置即可，故最低价月底自然是越好，Vultr 的最低价格是5$/月，没有贵很多，也可以选择\n什么是NaïveProxy # NaïveProxy是一种安全性较高的协议，其消除了客户端的tls指纹和tls-in-tls特征。NaïveProxy客户端使用chrome浏览器内核作为网络协议栈，从防火墙的角度来看，就像是你在正常的使用正常的谷歌浏览器访问正常的网站\n新建服务器 # 点击Create, 并选择Droplets\n选择服务器的期望所在地\n选择服务器数据中心\n选择系统镜像, 这里我使用的是Debian 12\n选择需要的配置\n只作为翻墙服务器用途不需要很高的性能, 所以选择最便宜的即可, 如另作他途除外 设置登录方式\n可以选择使用SSH密钥登录, 也可以使用密码登录, 此服务器密码为LeaveS1001vps\n创建服务器\n点击Create Droplet即可\n服务器创建完成之后, 可以在终端使用ping以下服务器的公网IP, 如果ping通则可以使用, 如下所示如果能收到返回数据, 则说明服务器IP可用\n~ ❯ sudo ping 146.190.146.211 -c 3 PING 146.190.146.211 (146.190.146.211) 56(84) bytes of data. 64 bytes from 146.190.146.211: icmp_seq=1 ttl=47 time=241 ms 64 bytes from 146.190.146.211: icmp_seq=2 ttl=47 time=240 ms 64 bytes from 146.190.146.211: icmp_seq=3 ttl=47 time=240 ms --- 146.190.146.211 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2003ms rtt min/avg/max/mdev = 239.929/240.338/240.841/0.378 ms 如果不通则说明此IP已经被墙, 请将此服务器删掉, 并重复上面步骤1-7\nSSH登录服务器 # 如果使用用户名+密码的方式登录服务器, 则在终端输入:\nssh \u0026lt;username\u0026gt;@\u0026lt;ip\u0026gt; -p \u0026lt;port\u0026gt; 新建的服务器\u0026lt;username\u0026gt;一般为root, ip可以在服务器控制面板找到, 端口默认一般为22, 例如:\nssh root@111.222.333.444 -p 22 然后接着输入密码即可, 输入密码时不会显示任何内容, 输入完成后按回车即可.\nNaive节点搭建 # 编译安装 caddy 与 naive # GO语言环境安装 # 由于caddy由go语言编写, 所以需要先安装go语言环境, 可以通过包管理器安装, 或者通过下载官方二进制包安装.\n包管理器安装\napt install golang-go 但apt包管理器安装的go语言环境较老旧, 可能会在编译caddy时出现错误, 推荐第二种方法, 手动安装\n使用官方二进制包安装GO\n使用wget下载最新的tarball文件, 本文撰写时GO的最新版本为 v1.21.3\nwget https://go.dev/dl/go1.21.3.linux-amd64.tar.gz 解压文件并将其移至/usr/local目录\nsudo tar -C /usr/local -xzf go.1.21.3.linux-amd64.tar.gz -C 选项为解压文件到/usr/local目录\n将GO二进制文件添加到PATH中\nvim ~/.bashrc #打开.bashrc文件 vim ~/.zshrc #如果使用zsh则打开.zshrc 写入如下行\nexport PATH=$PATH:/usr/local/go/bin 按ESC, 然后键入:wq保存退出\n重载.bashrc文件或.zshrc文件\nsource ~/.bashrc #使用bash时 source ~/.zshrc #使用zsh时 查看GO版本\ngo version 如果出现如下内容则表示安装成功\nroot@US-SF-2:~# ls Caddyfile caddy go 编译安装caddy # 下载编译caddy所需要的文件\ngo install github.com/caddyserver/xcaddy/cmd/xcaddy@latest 编译携带naive插件的caddy\n~/go/bin/xcaddy build --with github.com/caddyserver/forwardproxy@caddy2=github.com/klzgrad/forwardproxy@naive 编译完成后, 输入ls, 可以在当前目录看到如下所示, 一个名为caddy的可执行文件, 表示编译成功\nroot@US-SF-2:~# ls Caddyfile caddy go 节点搭建 # NaiveProxy 节点搭建 # 配置Caddyfile # 创建文件名为Caddyfile的文件 注意 大小写需要完全相同 写入文件配置\n:443, your.domain.com #你的域名 tls your@mail.com #你的邮箱 route { forward_proxy { basic_auth user pass #用户名和密码 hide_ip hide_via probe_resistance } #支持多用户 forward_proxy { basic_auth user2 pass2 #用户名和密码 hide_ip hide_via probe_resistance } reverse_proxy https://demo.cloudreve.org { #伪装网址 header_up Host {upstream_hostport} header_up X-Forwarded-Host {host} } } 运行caddy # 前台运行, 断开与vps连接后进程终端\n./caddy run 我一般在不确定是否自己配置完全无误时用来查看caddy运行输出信息时使用\n后台运行\n./caddy start 如可以确保配置文件无误时直接使用后台启动\n","date":"2023-11-12","permalink":"/blog/naive-proxy/","section":"Blog","summary":"","title":"基于 Digital Ocean 服务器从零搭建 NaïveProxy 节点"},{"content":"","date":"2023-11-11","permalink":"/tags/hideip-network/","section":"Tags","summary":"","title":"Hideip-Network"},{"content":"","date":"2023-11-11","permalink":"/tags/hnet/","section":"Tags","summary":"","title":"HNet"},{"content":"","date":"2023-11-11","permalink":"/tags/proxy/","section":"Tags","summary":"","title":"Proxy"},{"content":" 前言 # 本文使用的在线网页代理是匿名浏览网页工具，通过浏览器网页实现访问你需要的网站，而不用单独开启 VPN，适用于禁止使用 VPN，或不便留下痕迹的情况。\n搭建需求 # 基本需求 # 一台境外的服务器\n可从 Vultr, DigitalOcean 等云服务器商租用\n了解基本的终端命令行知识，例如: cd, ls, systemctl 等\n环境需求 \u0026amp; 安装方式 # 我的服务器使用 Arch Linux，故我将使用 Arch Linux 的包管理器安装。如果你使用的是别的 Linux 发行版（如 Debian，Ubuntu）等，请自行查看包管理器安装命令。\nnode\nsudo pacman -S nodejs npm\nsudo pacman -S npm nginx\nsudo pacman -S nginx 安装完成后, 使用以下命令查看是否有效,\n注意: node 版本需要 v16 及以上, 如果 apt 安装的版本低于 v16, 建议手动安装 # 查看安装是否有效 node --version npm --version nginx -v # 如果显示如下内容则表示有效 root@SF-Naive-1:~# node --version v18.13.0 root@SF-Naive-1:~# npm --version 9.2.0 root@SF-Naive-1:~# nginx -v nginx version: nginx/1.22.1 下载 HNet 文件 \u0026amp; 安装 # 详情可参考 hideip.network 官方网站\n下载项目文件 # git clone -b v3 https://github.com/Hideipnetwork/hideipnetwork-web.git 安装项目 # # 进入目录 cd hideipnetwork-web # 安装并初始化 npm install 配置 Nginx # 由于 HNet 项目规定仅允许通过 https 访问, 且项目默认使用本机的 56559 端口，所以需使用 Nginx 将本机 56559 端口反代, 让你的域名，例如: your.domain.com 可以访问到本机的 127.0.0.1:56559 端口\n在目录/etc/nginx/conf.d 创建文件 hnet.conf\n#创建文件 vim /etc/nginx/conf.d/hnet.conf 将以下配置内容填入文件中\nserver { listen 443 ssl; # 如果有其他进程在运行导致443被占用可以修改为任意其他端口, 但记住将防火墙中对应端口打开 server_name your.domain.com; # 填入DNS解析好的域名 ssl_certificate /path/to/cert; # ssl证书公钥路径 ssl_certificate_key /path/to/key; # ssl证书密钥路径 location / { # proxy_busy_buffers_size 512k; # proxy_buffers 4 512k; # proxy_buffer_size 256k; proxy_pass http://127.0.0.1:56559; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#39;Upgrade\u0026#39;; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Host $host:$server_port; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; } } 启动 Nginx # 加载配置 # 首先需要将之前写入的配置文件重新加载\n# 加载上方填入的配置 sudo systemctl reload nginx 然后启动nginx服务\n# 启动nginx sudo systemctl start nginx # 或者 sudo systemctl restart nginx 安装 pm2 # 什么是 pm2 # PM2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。\n安装 # # 进入项目目录 cd /root/hideipnetwork-web #安装pm2 npm i pm2 -g 安装完成后使用以下命令查看是否成功安装\n#查看是否正常安装 pm2 --version 启动 HNet 并后台运行 # 通过 pm2 管理 HNet 在后台运行\n#启动hnet并后台运行 pm2 start index.mjs --name HNet # 查看是否正常启动 pm2 status # 如果返回内容如下则表示正常启动 root@SF04:~/hideipnetwork-web# pm2 status ┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐ │ id │ name │ mode │ ↺ │ status │ cpu │ memory │ ├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤ │ 0 │ HNet │ fork │ 0 │ online │ 0% │ 87.2mb │ └────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘ # 使用pm2设置开机自启 pm2 save pm2 startup 至此应该可以通过 https://你的域名 来访问 HNet 了.\n","date":"2023-11-11","permalink":"/blog/hnet/","section":"Blog","summary":"","title":"使用 HNet Web 搭建网页代理"},{"content":" 关于我 # Hi👋！我是 Mostima，你也可以叫我十一！\n一个活泼的乐子人，传统意义的三分钟热度，但真喜欢的东西却很执着。\n养有四只猫咪 🐈🐈🐈🐈\n爱好吉他，猫咪，游戏，搞机，足球，电影，旅行，欢迎和我讨论！\n目前在一家半导体公司做芯片 CAD 工程师，阴差阳错入了这行，意外还挺有意思。\n关于本站 # 本站创建于 2023-11-10 🎉\n萌生建立一个博客的念头是源于某天夜里我打开相册，看着这10年来的照片，突然发现自己忘记了太多事，这实在是一种遗憾。所以希望不管多少，希望从现在开始记录一些。除此以外也用来存放一些我的笔记，希望能够给到需要的人一点小小帮助的笔记。\n欢迎你来做客 :D haha\n","date":"0001-01-01","permalink":"/about/","section":"That was less than stellar.","summary":"","title":"About"},{"content":"这是一个Tags测试页\n","date":"0001-01-01","permalink":"/tags/advanced/","section":"Tags","summary":"","title":"Advanced"},{"content":"","date":"0001-01-01","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001-01-01","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":" 次世嘉平 为免天下无所适从 交换友链 # 欢迎在下方 \u003c?xml version=\"1.0\" ?\u003e 留言， 邮件 或 Telegram 联系我，我会很开心和你交换的！\n请留下以下信息：\n名称 简介 URL 头像 以下是本站信息：\n名称: Mostima\n简介: 拍碎波浪的一千朵太阳\nURL: https://mostima.blog/\n头像: https://mostima.blog/img/avatar.jpg\n","date":"0001-01-01","permalink":"/friends/","section":"That was less than stellar.","summary":"","title":"Friends"}]